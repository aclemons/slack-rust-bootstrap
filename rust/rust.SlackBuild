#!/bin/sh

# Slackware build script for rust

# Copyright 2017, 2018  Andrew Clemons, Wellington, New Zealand
# Copyright 2017, 2018  Patrick J. Volkerding, Sebeka, Minnesota, USA
# Copyright 2017  Stuart Winter
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=rust
SRCNAM="${PRGNAM}c"
VERSION=${VERSION:-1.25.0}

# src/stage0.txt
RSTAGE0_VERSION=${RSTAGE0_VERSION:-1.24.0}
RSTAGE0_DIR=${RSTAGE0_DIR:-2018-02-15}
CSTAGE0_VERSION=${CSTAGE0_VERSION:-0.25.0}
CSTAGE0_DIR=${CSTAGE0_DIR:-$RSTAGE0_DIR}

BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# if you already have rust and cargo installed, you can bootstrap from the
# previous version.
if [ "$LOCAL_BOOTSTRAP" = "" ] && [ -x /usr/bin/cargo ] && [ -x /usr/bin/rustc ] ; then
  LOCAL_BOOTSTRAP=yes
fi

# https://forge.rust-lang.org/platform-support.html
# Bootstrapping ARCH:
if [ "$ARCH" = "i586" ]; then
  if [ "$LOCAL_BOOTSTRAP" = "yes" ] ; then
    if rustc -Vv | grep host | grep i586 > /dev/null ; then
      BARCH="$ARCH"
    else
      BARCH="i686"

      if case "$( uname -m )" in i586) true ;; *) false ;; esac ; then
        echo "rust must be bootstrapped from an i686 machine"
        exit 1
      fi
    fi
  else
    # i586 must be built on a i686 machine, since the bootstrap compiler is i686
    BARCH="i686"

    if case "$( uname -m )" in i586) true ;; *) false ;; esac ; then
      echo "rust must be bootstrapped from an i686 machine"
      exit 1
    fi
  fi

  TARCH="$ARCH"
elif [ "$ARCH" = "arm" ]; then
  # bootstrap compiler is armv6
  BARCH="$ARCH"

  if case "$( uname -m )" in armv5*) true ;; *) false ;; esac ; then
    echo "rust must be bootstrapped from an armv6 machine or later"
    exit 1
  fi

  # there is tier3 support for armv5te, but it ftbfs for me
  TARCH="$BARCH"
else
  BARCH="$ARCH"
  TARCH="$ARCH"
fi

# Bootstrapping ABI:
if [ "$ARCH" = "arm" ]; then
  BABI="gnueabi"
else
  BABI="gnu"
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

# Not needed, as the build will automatically use as many jobs as there are
# cores.
#NUMJOBS=${NUMJOBS:-" -j7 "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "arm" ] ; then
  SLKCFLAGS=""
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $SRCNAM-$VERSION-src
tar xvf $CWD/$SRCNAM-$VERSION-src.tar.xz
cd $SRCNAM-$VERSION-src

if [ "$LOCAL_BOOTSTRAP" != "yes" ] ; then
  # rust requires bootstrapping with the previous rust version.
  # versions are defined in src/stage0.txt.
  mkdir -p build/cache/$RSTAGE0_DIR
  cp $CWD/$PRGNAM-std-$RSTAGE0_VERSION-$BARCH-unknown-linux-$BABI.tar.gz \
     $CWD/$SRCNAM-$RSTAGE0_VERSION-$BARCH-unknown-linux-$BABI.tar.gz \
     build/cache/$RSTAGE0_DIR

  mkdir -p build/cache/$CSTAGE0_DIR
  cp $CWD/cargo-$CSTAGE0_VERSION-$BARCH-unknown-linux-$BABI.tar.gz build/cache/$CSTAGE0_DIR
fi

# Build configuration. We'll go ahead and build with rpath because it may be
# needed during the build, and then we'll strip the rpaths out of the
# binaries later.

# LLVM in Slackware14.2 is now too old to build rust 1.24.1, so the rust build
# falls back to building its own. You can force using the system LLVM with this
# flag.
SYSTEM_LLVM=${SYSTEM_LLVM:-no}

cat << EOF > config.toml
[llvm]
targets = "X86"

[build]
build = "$BARCH-unknown-linux-$BABI"
host = ["$TARCH-unknown-linux-$BABI"]
target = ["$TARCH-unknown-linux-$BABI"]
full-bootstrap = false
submodules = false
vendor = true
extended = true

[install]
prefix = "/usr"
docdir = "doc/rust-$VERSION"
libdir = "lib$LIBDIRSUFFIX"
mandir = "man"

[rust]
codegen-units = 0
thinlto = false
channel = "stable"
rpath = true
codegen-tests = false
ignore-git = true
EOF

if [ "$ARCH" = "arm" ] ; then
  sed -i 's/"X86"/"X86;ARM"//' config.toml
fi

if [ "$SYSTEM_LLVM" = "yes" ] ; then
  cat << EOF >> config.toml

[target.i586-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.x86_64-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.armv7-unknown-linux-gnueabihf]
llvm-config = "/usr/bin/llvm-config"
EOF

  if [ "$(llvm-config --version | cut -d. -f1)" -gt 3 ] ; then
    # llvm-config --cflags returns a set of flags including -Wcovered-switch-default
    # and -Wstring-conversion which gcc does not support, breaking the build.
    cat << EOF > local-llvm-config
#!/bin/bash

set -e
set -o pipefail

/usr/bin/llvm-config "\$@" | sed 's/-Wcovered-switch-default//g;s/-Wstring-conversion//g'
EOF

    chmod 0755 local-llvm-config
    sed -i "s|/usr/bin/llvm-config|$(pwd)/local-llvm-config|" config.toml
  fi

  # Link with -lffi in case of using system LLVM:
  zcat $CWD/link_libffi.diff.gz | patch -p1 --verbose
fi

FULL_BOOTSTRAP="${FULL_BOOTSTRAP:-no}"

if [ "$FULL_BOOTSTRAP" = "yes" ] ; then
  sed -i 's/^full-bootstrap.*$/full-bootstrap = true/' config.toml
fi

if [ "$LOCAL_BOOTSTRAP" = "yes" ] ; then
  sed -i "s|^\(extended = true\)$|\1\nrustc = \"/usr/bin/rustc\"\ncargo = \"/usr/bin/cargo\"|" config.toml
fi

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

export PKG_CONFIG_ALLOW_CROSS=1

if [ "$BARCH" = "i586" ] ; then
  # when bootstrapping from i586 (rust already installed), also build a i686
  # rustlib:
  sed -i 's/^target =.*$/target = ["i686-unknown-linux-gnu"]/' config.toml
elif [ "$BARCH" = "i686" ] ; then
  if [ "$TARCH" = "i586" ] ; then
    # this will cause some messages like:
    # warning: redundant linker flag specified for library `m`
    # but will keep the build from falling over when doing the stage1 compiler
    # linking for the i586 compiler. seems the correct flags don't get passed
    # through and we end up failures like:
    # error: linking with `clang` failed: exit code: 1
    # /tmp/SBo/rustc-1.20.0-src/build/i686-unknown-linux-gnu/stage1-rustc/i586-unknown-linux-gnu/release/deps/librustc_llvm-4ab259c9aed547db.so: undefined reference to `xxx`
    export RUSTFLAGS="$RUSTFLAGS -C link-args=-lrt -ldl -lcurses -lpthread -lz -lm"
  fi
fi

if [ "$ARCH" = "arm" ] ; then
  python x.py dist
else
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  python x.py dist
fi

DESTDIR=$PKG python x.py install

# Eh, none of this is all that big. Might as well leave it around as a
# reference.
#rm -f $PKG/usr/lib$LIBDIRSUFFIX/rustlib/components
#rm -f $PKG/usr/lib$LIBDIRSUFFIX/rustlib/install.log
#rm -f $PKG/usr/lib$LIBDIRSUFFIX/rustlib/manifest-*
#rm -f $PKG/usr/lib$LIBDIRSUFFIX/rustlib/rust-installer-version
#rm -f $PKG/usr/lib$LIBDIRSUFFIX/rustlib/uninstall.sh
# Make sure the paths are correct, though:
sed -i "s,$PKG/,/,g" $PKG/usr/lib$LIBDIRSUFFIX/rustlib/install.log $PKG/usr/lib$LIBDIRSUFFIX/rustlib/manifest-*
# And a little compression doesn't hurt either:
gzip -9 $PKG/usr/lib$LIBDIRSUFFIX/rustlib/manifest-*

# Correct permissions on shared libraries:
find $PKG/usr/lib$LIBDIRSUFFIX -name "*.so" -exec chmod 755 "{}" \;

# Strip ELF objects:
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# Remove any compiled-in RPATHs:
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs -I xx patchelf --remove-rpath xx 2> /dev/null || true

# Compress man pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

# Add some documentation:
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a *.md COPYRIGHT* LICENSE* $PKG/usr/doc/$PRGNAM-$VERSION
# Include licenses from third party vendors:
mkdir $PKG/usr/doc/$PRGNAM-$VERSION/vendor
( cd src/vendor
  tar cf - $(find . -maxdepth 2 | grep -e README -e LICENSE -e COPYING -e CHANGELOG -e PERFORMANCE -e UPGRADE ) | ( cd $PKG/usr/doc/$PRGNAM-$VERSION/vendor ; tar xf - )
)
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
