#!/bin/sh

# Copyright 2018 Andrew Clemons, Wellington New Zealand
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -eu

CWD="$(pwd)"

cleanup() {
  cd "$CWD"
  rm -rf mrustc/tmp
  rm -rf rust/tmp
  find . -type l -print0 | xargs --no-run-if-empty -0 -I xx unlink xx
}
trap "cleanup" INT TERM HUP QUIT EXIT

download() {
  dir="$1"
  mkdir -p "$dir"

  if [ -z "$(ls -A "$dir" 2> /dev/null)" ] ; then
    (
      cd "$dir"

      idx=1
      # shellcheck disable=SC2086
      for url in $DOWNLOAD ; do
        (
          cd ../tmp
          wget "$url"
        )

        expected_md5sum="$(printf "%s\\n" "$MD5SUM" | sed 's/[[:space:]][[:space:]]*/ /g' | tr ' ' '\n' | sed -n "$idx"p)"
        actual_md5sum="$(find ../tmp -type f -exec md5sum {} \; | cut -d' ' -f1)"

        if [ "$expected_md5sum" != "$actual_md5sum" ] ; then
          printf "Mismatched md5sum for %s. Expected '%s', got '%s'\\n" "$(find ../tmp -type f -print)" "$expected_md5sum" "$actual_md5sum"
          exit 1
        fi

        find ../tmp -type f -exec mv {} . \;

        idx=$((idx + 1))
      done
    )
  fi

  find . -type l -print0 | xargs --no-run-if-empty -0 -I xx unlink xx
  find "$dir" -type f -print0 | xargs --no-run-if-empty -0 -I xx ln -s xx
}

(
  cd mrustc
  # shellcheck disable=SC1091
  . ./mrustc.info

  printf "Building mrustc-%s\\n" "$VERSION"

  rm -rf "$(pwd)/tmp"
  mkdir -p "$(pwd)/tmp"

  download "$(pwd)/src"

  if [ -z "$(ls -A ./pkg/mrustc-*.t?z 2> /dev/null)" ] ; then
    TMP="$(pwd)/tmp" OUTPUT="$(pwd)/pkg" bash ./mrustc.SlackBuild
    rm -rf "$(pwd)/tmp"
  fi

  upgradepkg --reinstall --install-new pkg/mrustc-*.t?z
  find . -type l -print0 | xargs --no-run-if-empty -0 -I xx unlink xx
)

mkdir -p rust/pkg
for rversion in 1.20.0 1.21.0 1.22.1 1.23.0 1.24.1 1.25.0 1.26.2 1.27.2 1.28.0 1.29.2 1.30.1 ; do
  (
    cd rust

    # shellcheck disable=SC1090
    . ./rust-"$rversion".info

    printf "Building rust-%s\\n" "$VERSION"

    rm -rf "$(pwd)/tmp"
    mkdir -p "$(pwd)/tmp"

    download "$(pwd)/src-$rversion"

    if [ -z "$(ls -A ./pkg/rust-$rversion-*.t?z 2> /dev/null)" ] ; then
      if [ "$rversion" = "1.20.0" ] ; then
        FULL_BOOTSTRAP=yes
      else
        FULL_BOOTSTRAP=no
      fi

      TMP="$(pwd)/tmp" VERSION="$rversion" SYSTEM_LLVM=no FULL_BOOTSTRAP="$FULL_BOOTSTRAP" LOCAL_BOOTSTRAP=yes OUTPUT="$(pwd)/pkg" bash ./rust.SlackBuild
      rm -rf "$(pwd)/tmp"
    fi

    if [ "$rversion" = "1.20.0" ] ; then
      removepkg mrustc
    fi

    upgradepkg --reinstall --install-new pkg/rust-*$rversion*.t?z
    find . -type l -print0 | xargs --no-run-if-empty -0 -I xx unlink xx
  )
done

printf "rust %s is now installed. Packages used to bootstrap are in %s\\n" "$(rustc --version)" "$(pwd)/pkg"
